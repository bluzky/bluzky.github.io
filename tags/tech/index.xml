<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Bluz is Orange</title>
    <link>http://bluzky.github.io/tags/tech/</link>
    <description>Recent content in tech on Bluz is Orange</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 May 2018 20:56:31 +0700</lastBuildDate>
    
	<atom:link href="http://bluzky.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test Facebook bot trên localhost với ngrok</title>
      <link>http://bluzky.github.io/2018/05/test-facebook-bot-tr%C3%AAn-localhost-v%E1%BB%9Bi-ngrok/</link>
      <pubDate>Tue, 08 May 2018 20:56:31 +0700</pubDate>
      
      <guid>http://bluzky.github.io/2018/05/test-facebook-bot-tr%C3%AAn-localhost-v%E1%BB%9Bi-ngrok/</guid>
      <description>Trong quá trình tìm hiểu về lập trình chat bot sử dụng các API của Facebook Messenger thì việt test chat bot trên localhost là một trở ngại.
Khi tạo một subscription cho app chat bot, Facebook sẽ gửi một request đến server mà chat bot đang chạy để xác nhận có đúng là chat bot của bạn không. Cũng như sau đó, tất cả những tin nhắn của nguời dùng sẽ đuợc gửi tới chat bot thông qua callback url.</description>
    </item>
    
    <item>
      <title>Memcache là gì?</title>
      <link>http://bluzky.github.io/2018/05/memcache-l%C3%A0-g%C3%AC/</link>
      <pubDate>Tue, 01 May 2018 23:05:10 +0700</pubDate>
      
      <guid>http://bluzky.github.io/2018/05/memcache-l%C3%A0-g%C3%AC/</guid>
      <description>1. Memcache  Memcache là một cơ sở dữ liệu dạng key-value, các dữ liệu đuợc ghi nhớ trên RAM giúp tối ưu thời gian truy xuất.
 2. Đặc điểm  Dữ liệu lưu trữ dạng key-value Value là dữ liệu dạng string Kích thuớc của Value giới hạn là 1MB Dữ liệu sẽ bị mất khi tắt máy/ tắt memcache Truy xuất dữ liệu nhanh  3. Ứng dụng Memcache thường đuợc dùng đễ cache dữ liệu trên các web server giúp giảm thời gian xử lý các request giống nhau, thay vào đó chỉ cần đọc dữ liệu từ bộ nhớ và trả về ngay lập tức.</description>
    </item>
    
    <item>
      <title>Finite state machine trong lập trình</title>
      <link>http://bluzky.github.io/2018/04/finite-state-machine-trong-l%E1%BA%ADp-tr%C3%ACnh/</link>
      <pubDate>Fri, 13 Apr 2018 22:32:22 +0700</pubDate>
      
      <guid>http://bluzky.github.io/2018/04/finite-state-machine-trong-l%E1%BA%ADp-tr%C3%ACnh/</guid>
      <description>1. Tìm hiểu về FSM  FSM(Finite state machine) - Máy trạng thái hữu hạn là một mô hình toán học biểu diễn trạng thái của hệ, trong đó số trạng thái là hữu hạn. Từ mỗi trạng thái, máy có thể chuyển đổi qua 1 số trạng thái cố định khác, dựa trên các sự kiện, input.
 Fsm được biểu diễn như 1 đồ thị có hướng.</description>
    </item>
    
    <item>
      <title>Tìm hiểu về công nghệ Blockchain</title>
      <link>http://bluzky.github.io/2018/04/t%C3%ACm-hi%E1%BB%83u-v%E1%BB%81-c%C3%B4ng-ngh%E1%BB%87-blockchain/</link>
      <pubDate>Wed, 11 Apr 2018 20:53:06 +0700</pubDate>
      
      <guid>http://bluzky.github.io/2018/04/t%C3%ACm-hi%E1%BB%83u-v%E1%BB%81-c%C3%B4ng-ngh%E1%BB%87-blockchain/</guid>
      <description>Từ cơn sốt tiền ảo, công nghệ Blockchain được tung hô và được xem như là công nghệ sẽ làm thay đổi tương lại, thậm chí đến cả công ty thực phẩm thêm chữ Blockchain vào tên sản phẩm cũng đủ làm giá cổ phiếu tăng mấy chục lần. Vậy Blockchain là gì và nó có thực sự là thứ sẽ làm thay đổi tương lai công nghệ? Để trả lời thắc mắc của chính mình, tôi đã dành thời gian để tìm hiểu về Blockchain.</description>
    </item>
    
    <item>
      <title>What is Rabbit MQ?</title>
      <link>http://bluzky.github.io/2018/01/what-is-rabbit-mq/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://bluzky.github.io/2018/01/what-is-rabbit-mq/</guid>
      <description>1. What is Rabbit MQ?  Rabbit MQ is an server application, it is a message broker which implement AMQP (Advanced Message Queue Protocol). It works like a post service, which take the message from sender and dispatch that message to the receiver.
 Some terminologies:
 Producer: send message to queue Queue: hold all message added by producer and dispatch those message to a consumer Consumer: receive message from  2.</description>
    </item>
    
  </channel>
</rss>